import math
import sympy
from einsteinpy.symbolic import MetricTensor, predefined
#################################
#  Initial conditions
#################################
r0 = 6
phi0 = 0

#################################
#  Propagation parameters
#################################
tmax = 50            #Maximun time
steps = 100000       #Number of steps

#################################
#  Program parameters
#################################
M = 1                #Black hole mass
m = 1                #Particle mass
E = math.sqrt(8/9)   #Energy
j = math.sqrt(12)    #Angular momentum
s = 0                #Spin
Plot_trayectory = True
Plot_energy = False

#################################
#  Metric options
#################################
User_tensor = False
User_metric = False

#################################
# User_tensor (User_tensor=True)
#################################
#These 3 components must have both indices down. (Metric tensor)
g00 = '-(1-2*'+str(M)+'/r)'
g11 = '(1-2*'+str(M)+'/r)**(-1)'
g33 = 'r**2*sin(theta)**2'
#These 3 componets must have both indices up. (Metric tensor)
g_up_00 = '-(1-2*'+str(M)+'/r)**(-1)'
g_up_11 = '(1-2*'+str(M)+'/r)'
g_up_33 = '(r**2*sin(theta))**(-1)'
#Riemann tensor components with all 4 indices down.
R_3001 = '0'
R_3013 = '0'
R_3003 = '-(1-2*'+str(M)+'/r)*sin(theta)**2/r*'+str(M)
R_3113 = '-('+str(M)+'*sin(theta)**2)/(2*'+str(M)+'-r)'
R_3101 = '0'
R_1001 = str(M)+'*2/r**3'

#######################################################
# User_metric (User_tensor=Fase and User_metric=True)
#######################################################
#The coordinate order is coord = sympy.symbols('t r theta phi').
#Create the metric tensor on einsteinpy notation.
#The example below is a schwarzschild metric.

def Create_User_Metric_Tensor(coord):
	list2d = [[0 for i in range(4)] for i in range(4)]
	list2d[0][0] = -(1-2*M/coord[1])
	list2d[1][1] = 1 / (1 - 2*M / coord[1])
	list2d[2][2] = coord[1]**2
	list2d[3][3] = coord[1]**2*sympy.sin(coord[2])**2
	Metric = MetricTensor(list2d, coord)
	Metric.tensor()
	return Metric 